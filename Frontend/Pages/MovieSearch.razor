@page "/SearchResult/{movieTitle}"
@using Frontend.Entities
@using Frontend.Model.MovieSearchModel
@using Frontend.Service
@inject IMovieSearchModel MovieSearchModel
@inject NavigationManager NavManager
@using Blazorise.LottieAnimation
@using Blazorise

<PageTitle>Search Result</PageTitle>

<h3>Search Result</h3>


@if (!isDataFetched)
{

    <LottieAnimation Path="/Animations/loadingAimation.json" Style="height: 200px" /> 

}


else if (movieList.Count == 0)
{
    <p size="20px">No such movie exists.</p>
}


<table>
    <thead>
    <tr>
       <th>Poster</th> 
        <th>Title</th>
        <th>ReleaseYear  <button class="btn btn-secondary" @onclick="SortByReleaseYear">V</button></th>
        <th>Rating <button class="btn btn-secondary" @onclick="SortByRating">V</button></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var movie in movieList)
    {
        <tr @onclick="@(() => OnMovieClick(movie.Id))">
            <td><img src="@movie.PosterUrl" alt="Image" height="200"></td>
            <td>@movie.Title</td>
            <td>@movie.ReleaseYear</td>
            <td>@movie.Rating.AverageRating</td>
        </tr>
    }
    </tbody>
</table>

<div class="page-navigation">
    <button class="btn btn-secondary">{</button>
    <p>Page @pageNumber</p>
    <button class="btn btn-secondary">}</button>
</div>

@code {
    [Parameter]
    public string MovieTitle { get; set; }
    private IList<Movie> movieList = new List<Movie>();
    private string movieTitle { get; set; }
    private int pageNumber { get; set; }

    private bool isFirstRender = true;
    private bool isDataFetched = false;


    protected override async Task OnParametersSetAsync()
    {
        movieTitle = MovieTitle;
        pageNumber = 1;
        isDataFetched = false;
        await SearchForMovie();
        isDataFetched = true;
    }

 
    private async Task SearchForMovie()
    {
        movieList.Clear();
        movieList = await MovieSearchModel.SearchForMovieAsync(movieTitle);
    }

    private void OnMovieClick(string movieId)
    {
        NavManager.NavigateTo($"movieDetails/{movieId}");
    }

    private async Task SortByRating()
    {
        movieList.Clear();
        movieList = await MovieSearchModel.SearchForMovieAsync(movieTitle, MovieSortingKey.Rating, SortingDirection.DESC, pageNumber);
    }

    private async Task SortByReleaseYear()
    {
        movieList.Clear();
        movieList = await MovieSearchModel.SearchForMovieAsync(movieTitle, MovieSortingKey.ReleaseYear, SortingDirection.DESC, pageNumber);
    }

}


