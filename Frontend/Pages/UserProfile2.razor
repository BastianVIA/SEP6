@page "/UserProfile2/{UID}"
@using Frontend.Entities
@using Blazorise
@using Blazorise.Charts
@using Frontend.Model.FavoriteMovies
@using Frontend.Model.Firebase
@using Frontend.Model.UserProfilePicture
@using Frontend.Model.UserProfiles
@using Frontend.Components
@inject NavigationManager NavManager
@inject IUserProfilesModel UserProfilesModel
@inject IFirebaseModel FirebaseModel
@inject IFavoriteMoviesModel FavoriteMoviesModel
@inject IUserProfilePictureModel UserProfilePictureModel

<div class="user-profile-container">
    
    @if (user == null)
    {
        @* <p> *@
        @*     <LottieAnimation Path="/Animations/loadingAimation.json" Style="(height: 200px)"/> *@
        @* *@
        @* </p> *@
    }
    else
    {
        <Row Margin="Margin.Is2.FromBottom">
            <Column ColumnSize="ColumnSize.Is3" >
                <img src="@(!string.IsNullOrEmpty(profilePicture) ? profilePicture : defaultProfilePicture)" alt="profile pic" width="100%">
                <Field Width="Width.Is100">
                    <FilePicker Upload="UpdateProfilePicture"/>
                </Field>
            </Column>
            <Column ColumnSize="ColumnSize.Is3">
                <h3>Display Name: <b>@user.Username</b></h3>
            </Column>
        </Row>

        <Divider Margin="Margin.Is5.FromBottom.Is5.FromTop"/>
        
        <div class="favorite-container">
            <h4>Favorite Movies</h4>
            @if (favoriteMovies != null && favoriteMovies.Any())
            {
                <MovieTable MovieList="@favoriteMovies" PosterSize="100" OnMovieClicked="@OnMovieClick"/>
            }
            else
            {
                <p>No favorite movies yet.</p>
            }
        </div>
        
        <Divider Margin="Margin.Is5.FromBottom.Is5.FromTop"/>
        
        <Row>
            <Column ColumnSize="ColumnSize.Is4" Flex="Flex.AlignItems.Start">
                <h5>Total Movies Reviewed: <b>@totalMoviesReviewed</b></h5>
            </Column>
            <Column ColumnSize="ColumnSize.Is4" Flex="Flex.AlignItems.Start">
                <h5>User's Average Rating on Movies: <b>@averageRating</b> ⭐</h5>
            </Column>
            <Column ColumnSize="ColumnSize.Is4" Flex="Flex.AlignItems.Start">
                <h5>Favorited Movies Average: <b>@averageRatingFavMovies.ToString("0.00")</b> ⭐</h5>
            </Column>
        </Row>
        
        <Divider Margin="Margin.Is5.FromBottom.Is5.FromTop"/>
    }
    
    <div class="chart-container">
        <Row>
            <h4>Users Assessment summary on Movies</h4>
            <Chart @ref="barChart" TItem="double" Type="ChartType.Bar">
                <ChartOptions Responsive="true" Title="Movie Ratings"/>
                <BarChartDataset TItem="double" Data="@ratingsCount" BackgroundColor="backgroundColors"/>
                <ChartLabels Labels="@Labels"/>
            </Chart>
        </Row>
    </div>
</div>

@code {
    [Parameter]
    public string UID { get; set; }
    public Chart<double> barChart;
    private string defaultProfilePicture = "/Images/NotFoundImage.jpg";
    private User user;
    private bool isUserLoaded = false;
    private IList<Movie> favoriteMovies = new List<Movie>();
    private double averageRating = 0;
    private int totalMoviesReviewed = 0;
    private double averageRatingFavMovies = 0;
    private string profilePicture;
    private int pageNumber { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        isUserLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadUserData()
    {
        user = await UserProfilesModel.GetUserProfile(UID);
        user.ProfilePicture = await UserProfilePictureModel.GetProfilePicture(FirebaseModel.CurrentUser.UID);
        string base64String = Convert.ToBase64String(user.ProfilePicture, 0, user.ProfilePicture.Length);
        profilePicture = $"data:image/jpg;base64,{base64String}";
        favoriteMovies = await FavoriteMoviesModel.GetFavoriteMovies(FirebaseModel.CurrentUser.TokenValue, UID);
        if (favoriteMovies.Any())
        {
            averageRatingFavMovies = favoriteMovies.Average(movie => movie.Rating?.AverageRating ?? 0);
        }

        if (user.RatingDataPoints.Any())
        {
            totalMoviesReviewed = user.RatingDataPoints.Sum(r => r.Item2);
            averageRating = user.RatingDataPoints.Sum(r => r.Item1 * r.Item2) / (double)totalMoviesReviewed;

            ratingsCount.Clear();
            ratingsCount.AddRange(user.RatingDataPoints.OrderBy(r => r.Item1).Select(r => (double)r.Item2));

            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        
            await barChart.Clear();

            await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
        
    }
    
    private void OnMovieClick(string movieId)
    {
        NavManager.NavigateTo($"movieDetails/{movieId}");
    }

    private BarChartDataset<double> GetBarChartDataset()
    {
        return new BarChartDataset<double>
        {
            Label = "Movie Ratings",
            Data = ratingsCount,
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            BorderWidth = 1
        };
    }

    List<double> ratingsCount = new List<double> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };

    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    string[] Labels = { "One Star", "Two Stars", "Three Stars", "Four Stars", "Five Stars", "Six Stars", "Seven Stars", "Eight Stars", "Nine Stars", "Ten Stars" };
    
    private async Task UpdateProfilePicture(FileUploadEventArgs e)
    {
        try
        {
            using ( MemoryStream result = new MemoryStream() )
            {
                await e.File.OpenReadStream( long.MaxValue ).CopyToAsync( result );
                await UserProfilePictureModel.UploadProfilePicture(FirebaseModel.CurrentUser.TokenValue, result.ToArray());
            }
        }
        catch ( Exception exc )
        {
            Console.WriteLine( exc.Message );
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}