@page "/SearchResult/{SearchText}"
@using Frontend.Components
@using Blazorise
@using Frontend.Entities
@using Frontend.Model.SearchFilter
@inject ISearchFilterModel SearchFilterModel

<Row>
    <Column ColumnSize="ColumnSize.Is2">
        <Div Margin="Margin.Is2.FromStart.Is2.FromBottom">
            <h4 style="margin-left: 5px">Filter</h4>
            <Div Width="Width.Is100">
                <RadioGroup Flex="Flex.AlignItems.Stretch" Orientation="Orientation.Vertical" TValue="string" Name="searchType" CheckedValue="@checkedValue" Buttons CheckedValueChanged="@OnChange">
                    <Radio Value="@("movies")"><b>Movies @searchFilter.numberOfMovies</b></Radio>
                    <Radio Value="@("users")"><b>Users @searchFilter.numberOfUsers</b></Radio>
                    <Radio Value="@("persons")"><b>Persons @searchFilter.numberOfPersons</b></Radio>
                </RadioGroup>
            </Div>
        </Div>
    </Column>

    <Column ColumnSize="ColumnSize.Is8">
        @switch (checkedValue)
        {
            case "movies":
                <MovieSearch MovieTitle="@SearchText"/>
                break;
            case "users":
                <UserSearch DisplayName="@SearchText"/>
                break;
            case "persons":
                <PersonSearch PersonName="@SearchText"/>
                break;
            default:
                <p>Nothing found</p>
                break;
        }

    </Column>
</Row>


@code {

    [Parameter]
    public string SearchText { get; set; }

    private string checkedValue = "movies";

    private SearchFilter searchFilter = new SearchFilter
    {
        numberOfPersons = 0,
        numberOfUsers = 0,
        numberOfMovies = 0
    };

    private bool pageLoaded;

    private void OnChange(string value)
    {
        checkedValue = value;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFilter();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadFilter();
    }

    private async Task LoadFilter()
    {
        searchFilter = await SearchFilterModel.GetSearchFilter(SearchText);
        pageLoaded = true;
        StateHasChanged();
    }

}