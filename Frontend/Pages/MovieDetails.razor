@page "/MovieDetails/{movieId}"
@using Frontend.Entities
@using Frontend.Model.MovieDetail
@using Blazorise
@using Frontend.Model.FavoriteMovies
@using Frontend.Model.Firebase
@using Button = Blazorise.Bootstrap.Button
@inject IMovieDetailModel MovieDetailModel
@inject IFavoriteMoviesModel FavoriteMoviesModel
@inject IFirebaseModel FirebaseModel
@using Blazorise.LottieAnimation

@if (movieLoaded)
{
    <div class="movie-container">
        <Row>
            <Column ColumnSize="ColumnSize.Is12">
                <h2>@movie.Title</h2>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.Is4">
                <img src="@movie.PosterUrl" alt="poster" class="movie-poster"/>
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                <h4>Actors</h4>
                <ul>
                    @if (movie.Actors != null)
                    {
                        foreach (var actor in movie.Actors)
                        {
                            <li>@actor.Name, @actor.BirthYear</li>
                        }
                    }
                    else
                    {
                        <li>No actors listed</li>
                    }
                </ul>
            </Column>
            <Column ColumnSize="ColumnSize.Is2">
                <AuthorizeView>
                    <Authorized>
                        <div>
                            <h4>Favorite</h4>
                            @if (IsOnFavorites())
                            {
                                <Button Color="@Color.Secondary" Clicked="@StarClicked">
                                    <Icon TextColor="@TextColor.Warning" Name="@IconName.Star"/>
                                </Button>
                            }
                            else
                            {
                                <Button Color="@Color.Secondary" Clicked="@StarClicked">
                                    <Icon TextColor="@TextColor.Black50" Name="@IconName.Star"/>
                                </Button>
                            }
                        </div>
                    </Authorized>
                </AuthorizeView>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.Is4">
                <h4>Directors</h4>
                <ul>
                    @if (movie.Directors != null)
                    {
                        foreach (var director in movie.Directors)
                        {
                            <li>@director.Name, @director.BirthYear</li>
                        }
                    }
                    else
                    {
                        <li>No directors listed</li>
                    }
                </ul>
            </Column>
            <Column ColumnSize="ColumnSize.Is4">
                <h4>Rating</h4>
                <p>@(movie?.Rating?.AverageRating.ToString() ?? "N/A") based on @(movie?.Rating?.RatingCount.ToString() ?? "N/A") votes</p>
            </Column>
            <Column ColumnSize="ColumnSize.Is4">
                <h4>Release Year</h4>
                <p>@movie.ReleaseYear</p>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.Is12">
                <h4>Resume</h4>
                <p>@movie.Resume</p>
            </Column>
        </Row>
        <Row>
            <AuthorizeView>
                <Authorized>
                    <Rating Color="Color.Primary" @onclick="@OnRatingChange" @bind-SelectedValue="UserRating" MaxValue="10"/>
                </Authorized>
            </AuthorizeView>
        </Row>
        
    </div>
}
else
{
    <LottieAnimation Path="/Animations/loadingAimation.json" Style="height: 200px"/>
}

@code {

    [Parameter]
    public string MovieId { get; set; }

    private Movie movie;
    private bool movieLoaded = false;
    public int UserRating;
    protected override async Task OnInitializedAsync()
    {
        await LoadMovieDetails();
    }

    private void OnRatingChange()
    {
        MovieDetailModel.SetMovieRating(FirebaseModel.CurrentUser!.TokenValue, MovieId, UserRating == 0 ? null : UserRating);
    }

    private async Task LoadMovieDetails()
    {
        movie = await MovieDetailModel.GetMovieDetails(MovieId, FirebaseModel.CurrentUser?.TokenValue);
        UserRating = movie?.UserRating ?? 0;
        movieLoaded = true;
    }

    private async Task StarClicked()
    {
        try
        {
            movie.IsFavorite = !movie.IsFavorite;
            await FavoriteMoviesModel.AddToFavoriteMovies(FirebaseModel.CurrentUser!.TokenValue, MovieId);
             await LoadMovieDetails();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private bool IsOnFavorites()
    {
        return (movie.IsFavorite != null && movie.IsFavorite.Value);
    }
}

}