@page "/userprofile"
@using Frontend.Model.MovieDetail
@using Frontend.Model.FavoriteMovies
@using Frontend.Model.UserProfiles
@using Frontend.Entities
@using Frontend.Model.Firebase
@inject IUserProfilesModel UserProfilesModel
@inject IFavoriteMoviesModel FavoriteMoviesModel
@inject NavigationManager NavManager
@inject IMovieDetailModel MovieDetailModel
@inject IFirebaseModel FirebaseModel
@using Blazorise.Charts

<div class="user-profile">
    @if (user == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="user-profile__header">
            <div class="user-profile__image">
                <img src="@user.ProfilePicture" alt="Profile Picture"/>
                <input type="file" @onchange="UpdateProfilePicture"/>
            </div>
            <div class="user-profile__info">
                <h4>@user.Username</h4>
                <p>@user.Email</p>
                <p>@user.Bio</p>
            </div>
        </div>

        <h5>Favorite Movies</h5>
        @if (favoriteMovies != null && favoriteMovies.Any())
        {
            <div class="user-profile__favorites">
                @foreach (var movie in favoriteMovies)
                {
                    <div class="user-profile__favorites__item">
                           <TableRow @onclick="@(() => OnMovieClick(movie.Id))">
                           <TableRowCell>
                               <img src="@movie.PosterUrl" height="30px"/>
                           </TableRowCell>
                           </TableRow>
                        <p>@movie.Title</p>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No favorite movies yet.</p>
        }

        <p>User's Average Rating on Movies: @averageRating</p>

        <h5>Total Movies Reviewed: @totalMoviesReviewed</h5>

    }

     <div style="width: 90%; height: 33%;">
                    <BarChart @ref="barChart" TItem="int">
                        <ChartOptions Responsive="true" Title="Movie Ratings"/>
                        <BarChartDataset TItem="int" Data="new ChartData<int> { Data = ratingsCount }" BackgroundColor="backgroundColors"/>
                        <ChartLabels Labels="@Labels"/>
                    </BarChart>
                </div>

</div>




@code {
    BarChart<int> barChart;
    private User user;
    private IList<Movie> favoriteMovies;
    private double averageRating;
    private int totalMoviesReviewed;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        user = await UserProfilesModel.GetUserProfile(FirebaseModel.CurrentUser.UID);
        favoriteMovies = await FavoriteMoviesModel.GetFavoriteMovies(FirebaseModel.CurrentUser.TokenValue, FirebaseModel.CurrentUser.UID);

        // if (favoriteMovies != null && favoriteMovies.Any())
        // {
        //     totalMoviesReviewed = favoriteMovies.Count();
        //     averageRating = favoriteMovies.Average(movie => movie.Rating?.AverageRating ?? 0);
        //     ratingsCount = Enumerable.Range(1, 10).Select(rating => favoriteMovies.Count(movie => movie.Rating?.AverageRating == rating)).ToList();
        // }
        
        ratingsCount.Clear();


        if (user.RatingDataPoints != null && user.RatingDataPoints.Any())
        {
            totalMoviesReviewed = user.RatingDataPoints.Sum(r => r.Item2);
            averageRating = user.RatingDataPoints.Sum(r => r.Item1 * r.Item2) / (double)totalMoviesReviewed;
            
            ratingsCount.AddRange(user.RatingDataPoints.OrderBy(r=> r.Item1).Select(r=>r.Item2));
        }
        await InvokeAsync(StateHasChanged);
    }


    private async Task UpdateProfilePicture(ChangeEventArgs e)
    {
        var file = e.Value as IBrowserFile;

        if (file != null)
        {

            //TODO logic to upload
        }
    }


    async Task HandleRedraw()
    {
        await barChart.Clear();

        await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
    }

    private BarChartDataset
        <int> GetBarChartDataset()
    {
        return new BarChartDataset
            <int>
        {
            Label = "Movie Ratings",
            Data = ratingsCount,
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            BorderWidth = 1
        };
    }

    List
        <int> ratingsCount = new List
            <int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    List
        <string> backgroundColors = new List
            <string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };

    List
        <string> borderColors = new List
            <string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List
        <string> Labels = new List
            <string> { "One Star", "Two Stars", "Three Stars", "Four Stars", "Five Stars", "Sex Stars", "Seven Stars", "Eight Stars", "Nine Stars", "Ten Stars" };

    Task OnClicked(ChartMouseEventArgs e)
    {
        var model = e.Model as BarChartModel;

        Console.WriteLine($"Handling event for {nameof(BarChartModel)}: x:{model.X} y:{model.Y}");
        return Task.CompletedTask;
    }


    private void OnMovieClick(string movieId)
    {
        NavManager.NavigateTo($"movieDetails/{movieId}");
    }

}

