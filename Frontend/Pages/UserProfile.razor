@page "/UserProfile/{UID}"
@using Frontend.Entities
@using Blazorise
@using Frontend.Model.FavoriteMovies
@using Frontend.Model.Firebase
@using Frontend.Model.UserProfilePicture
@using Frontend.Model.UserProfiles
@using Frontend.Components
@using Frontend.Model.SocialFeed
@inject NavigationManager NavManager
@inject IUserProfilesModel UserProfilesModel
@inject IFirebaseModel FirebaseModel
@inject IFavoriteMoviesModel FavoriteMoviesModel
@inject IUserProfilePictureModel UserProfilePictureModel
@inject ISocialFeedModel SocialFeedModel

<div class="user-profile-container">
    
    @if (user == null)
    {
        <Loading/>
    }
    else
    {
        <Row Margin="Margin.Is2.FromBottom">
            <Column ColumnSize="ColumnSize.Is3" >
                <img src="@(!string.IsNullOrEmpty(imageDataURL) ? imageDataURL : defaultProfilePicture)" alt="profile pic" width="100%">
                @if (IsOwnProfile())
                {
                    <Field Width="Width.Is100">
                        <FilePicker Upload="UpdateProfilePicture"/>
                    </Field>
                }
            </Column>
            <Column ColumnSize="ColumnSize.Is4">
                <h3>Display Name: <b>@user.Username</b></h3>
            </Column>
            <Column ColumnSize="ColumnSize.Is5">
                <AuthorizeView>
                    <Authorized>
                        <Div Width="Width.Is100" Flex="Flex.JustifyContent.End">
                            @if (IsOwnProfile())
                            {
                                <Button Color="Color.Primary" Clicked="OnFollowList">Follow List</Button>
                            }
                            else
                            {
                                @if (isFollowing)
                                {
                                    <Button Color="Color.Secondary" Clicked="UnFollow">Unfollow</Button>
                                }
                                else
                                {
                                    <Button Color="Color.Primary" Clicked="Follow">Follow</Button>
                                }
                            }
                        </Div>
                    </Authorized>
                </AuthorizeView>
            </Column>
        </Row>

        <Divider Margin="Margin.Is5.FromBottom.Is5.FromTop"/>
        
        <div class="favorite-container">
            <h4>Favorite Movies</h4>
            @if (favoriteMovies != null && favoriteMovies.Any())
            {
                <MovieTable MovieList="@favoriteMovies" PosterSize="100" OnMovieClicked="@OnMovieClick"/>
            }
            else
            {
                <p>No favorite movies yet.</p>
            }
        </div>
        
        <Divider Margin="Margin.Is5.FromBottom.Is5.FromTop"/>
        
        <Row>
            <Column ColumnSize="ColumnSize.Is4" Flex="Flex.AlignItems.Start">
                <h5>Total Movies Reviewed: <b>@totalMoviesReviewed</b></h5>
            </Column>
            <Column ColumnSize="ColumnSize.Is4" Flex="Flex.AlignItems.Start">
                <h5>User's Average Rating on Movies: <b>@averageRating.ToString("0.00")</b> ⭐</h5>
            </Column>
            <Column ColumnSize="ColumnSize.Is4" Flex="Flex.AlignItems.Start">
                <h5>Favorited Movies Average: <b>@averageRatingFavMovies.ToString("0.00")</b> ⭐</h5>
            </Column>
        </Row>
        
        <Divider Margin="Margin.Is5.FromBottom.Is5.FromTop"/>
    }
    
    <div class="chart-container" hidden="@hideChart">
        <Row>
            <h4>Users Assessment summary on Movies</h4>
            <Chart @ref="barChart" TItem="double" Type="ChartType.Bar">
                <ChartOptions Responsive="true" Title="Movie Ratings"/>
                <BarChartDataset TItem="double" Data="@ratingsCount" BackgroundColor="backgroundColors"/>
                <ChartLabels Labels="@Labels"/>
            </Chart>
        </Row>
    </div>
</div>

@if (user != null)
{
    <SocialFeed FeedPosts="@feedPosts" isUserProfile="@true" UID="@UID"/>
}


<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Following</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Table Hoverable Striped>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Profile Picture</TableHeaderCell>
                                <TableHeaderCell>
                                    <div>
                                        Username
                                    </div>
                                </TableHeaderCell>
                                <TableHeaderCell>
                                    <div>
                                        Number Rated Movies
                                    </div>
                                </TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (User user in followingUserList)
                            {
                                <TableRow @onclick="@(() => OnUserClick(user.Id))">
                                    <TableRowCell>
                                        <img src="@user.ProfilePicture" height="150"/>
                                    </TableRowCell>
                                    <TableRowCell>@user.Username</TableRowCell>
                                    <TableRowCell>@user.RatedMovies</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public string UID { get; set; }
    public Chart<double> barChart;
    private string defaultProfilePicture = "/Images/NotFoundImage.jpg";
    private User user;
    private bool isUserLoaded = false;
    private IList<Movie> favoriteMovies = new List<Movie>();
    private double averageRating = 0;
    private int totalMoviesReviewed = 0;
    private double averageRatingFavMovies = 0;
    private string imageDataURL;
    private int pageNumber { get; set; } = 1;
    private bool isFollowing;
    private Modal modalRef;
    private IList<User> followingUserList = new List<User>();
    private List<UserFeed> feedPosts;
    private bool hideChart = true;
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        isUserLoaded = true;
        hideChart = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadUserData()
    {
        feedPosts = await SocialFeedModel.GetOwnSocialFeed(UID, pageNumber);
        user = await UserProfilesModel.GetUserProfile(UID);
        imageDataURL = await GetProfilePicture(UID);
        if (FirebaseModel.CurrentUser != null)
        {
            isFollowing = await UserProfilesModel.IsFollowingUser(FirebaseModel.CurrentUser.TokenValue, FirebaseModel.CurrentUser.UID, UID);
        }
        favoriteMovies = await FavoriteMoviesModel.GetFavoriteMovies(UID);
        if (favoriteMovies.Any())
        {
            averageRatingFavMovies = favoriteMovies.Average(movie => movie.Rating?.AverageRating ?? 0);
        }

        if (user.RatingDataPoints.Any())
        {
            totalMoviesReviewed = user.RatingDataPoints.Sum(r => r.Item2);
            averageRating = user.RatingDataPoints.Sum(r => r.Item1 * r.Item2) / (double)totalMoviesReviewed;

            ratingsCount.Clear();
            ratingsCount.AddRange(user.RatingDataPoints.OrderBy(r => r.Item1).Select(r => (double)r.Item2));

            await HandleRedraw();
        }
    }

    private bool IsOwnProfile()
    {
        if (FirebaseModel.CurrentUser != null)
        {
            return (FirebaseModel.CurrentUser.UID == UID);
        }
        return false;
    }

    async Task HandleRedraw()
    {
        
            await barChart.Clear();

            await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
        
    }
    
    private void OnMovieClick(string movieId)
    {
        NavManager.NavigateTo($"movieDetails/{movieId}");
    }

    private BarChartDataset<double> GetBarChartDataset()
    {
        return new BarChartDataset<double>
        {
            Label = "Movie Ratings",
            Data = ratingsCount,
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            BorderWidth = 1
        };
    }

    List<double> ratingsCount = new List<double> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };

    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    string[] Labels = { "One Star", "Two Stars", "Three Stars", "Four Stars", "Five Stars", "Six Stars", "Seven Stars", "Eight Stars", "Nine Stars", "Ten Stars" };
    
    private async Task UpdateProfilePicture(FileUploadEventArgs e)
    {
        try
        {
            using ( MemoryStream result = new MemoryStream() )
            {
                await e.File.OpenReadStream( long.MaxValue ).CopyToAsync( result );
                await UserProfilePictureModel.UploadProfilePicture(FirebaseModel.CurrentUser.TokenValue, result.ToArray());
            }
        }
        catch ( Exception exc )
        {
            Console.WriteLine( exc.Message );
        }
        finally
        {
            imageDataURL = await GetProfilePicture(UID);
            this.StateHasChanged();
        }
    }

    private async Task Follow()
    {
        await UserProfilesModel.FollowUser(FirebaseModel.CurrentUser.TokenValue, UID);
        isFollowing = await UserProfilesModel.IsFollowingUser(FirebaseModel.CurrentUser.TokenValue, FirebaseModel.CurrentUser.UID, UID);
    }
    
    private async Task<string> GetProfilePicture(string userId)
    {
        var profilePicture = await UserProfilePictureModel.GetProfilePicture(userId);
        string imageDataURL;
        if (profilePicture != null && profilePicture.Any())
        {
            var profilePictureString = Convert.ToBase64String(profilePicture, 0, profilePicture.Length);
            imageDataURL = $"data:image/jpg;base64,{profilePictureString}";

        }
        else
        {
            imageDataURL = "/Images/NotFoundImage.jpg";
        }
        return imageDataURL;
    }

    private async Task UnFollow()
    {
        await UserProfilesModel.UnFollowUser(FirebaseModel.CurrentUser.TokenValue, UID);
        isFollowing = await UserProfilesModel.IsFollowingUser(FirebaseModel.CurrentUser.TokenValue, FirebaseModel.CurrentUser.UID, UID);
    }

    private async Task<Task> OnFollowList()
    {
        var followingUserIdsList = await UserProfilesModel.GetFollowingUsers(FirebaseModel.CurrentUser.TokenValue, FirebaseModel.CurrentUser.UID);
        followingUserList.Clear();
        foreach (var followingUser in followingUserIdsList)
        {
            followingUserList.Add(new User
            {
                Id = followingUser.Id,
                Username = followingUser.Username,
                ProfilePicture = await GetProfilePicture(followingUser.Id)
            });
        }
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
    
    private void OnUserClick(string userId)
    {
        NavManager.NavigateTo("/");
        NavManager.NavigateTo($"UserProfile/{userId}");
    }

}