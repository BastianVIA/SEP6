@page "/"
@using Blazorise
@using Frontend.Entities
@using Frontend.Model.Recommendations
@inject NavigationManager NavManager
@inject IRecommendationsModel RecommendationsModel
@using Blazorise.LottieAnimation
@using Frontend.Components

@if (recommendationsLoaded)
{
    <div class="card-deck-container">
        <Carousel Crossfade="true" Autoplay="false" ShowControls="false" ShowIndicators="false" SelectedSlide="@selectedSlide.ToString()">

            <CarouselSlide Name="1">
                <Div Display="Display.Flex" Flex="Flex.JustifyContent.Between" Margin="Margin.Is2.FromBottom">
                    <h2>Recommended Movies</h2>
                    <Button Color="Color.Primary" Clicked="NextSlide" Height="Height.Is75">
                        <Icon Name="IconName.Sync"/>
                    </Button>
                </Div>
                <CardDeck>
                    @foreach (Movie movie in recommendations)
                    {
                        <Card @onclick="@(() => OnMovieClick(movie.Id))">
                            <CardImage Source="@movie.PosterUrl.ToString()" Alt="poster"/>
                            <CardBody Padding="Padding.Is1.FromStart.Is1.FromEnd.Is2.FromTop">
                                <CardTitle TextWeight="TextWeight.Bold">
                                    @movie.Title
                                </CardTitle>
                                <CardText Position="Position.Absolute.Bottom.Is0" Margin="Margin.Is1.FromBottom">
                                    @movie.Rating.AverageRating <Icon TextColor="TextColor.Warning" Name="IconName.Star"/>
                                </CardText>
                            </CardBody>
                        </Card>
                        counter++;
                        if (amountOfMoviesToShow <= counter)
                        {
                            counter = 0;
                            break;
                        }
                    }
                </CardDeck>
            </CarouselSlide>
            <CarouselSlide Name="2">
                <h2>Recommended Movies</h2>
                <Button Color="Color.Primary" Clicked="NextSlide" Margin="Margin.Is3.FromTop">Refresh Recommendations</Button>
                <CardDeck>
                    @foreach (Movie movie in recommendations)
                    {
                        <Card @onclick="@(() => OnMovieClick(movie.Id))">
                            <CardImage Source="@movie.PosterUrl.ToString()" Alt="poster"/>
                            <CardBody Padding="Padding.Is1.FromStart.Is1.FromEnd.Is2.FromTop">
                                <CardTitle TextWeight="TextWeight.Bold">
                                    @movie.Title
                                </CardTitle>
                                <CardText Position="Position.Absolute.Bottom.Is0" Margin="Margin.Is1.FromBottom">
                                    @movie.Rating.AverageRating <Icon TextColor="TextColor.Warning" Name="IconName.Star"/>
                                </CardText>
                            </CardBody>
                        </Card>
                        counter++;
                        if (amountOfMoviesToShow <= counter)
                        {
                            counter = 0;
                            break;
                        }
                    }
                </CardDeck>
            </CarouselSlide>
        </Carousel>
    </div>

    <AuthorizeView>
        <Authorized>
            <SocialFeed/>
        </Authorized>
    </AuthorizeView>
    
}

else
{
    <LottieAnimation Path="/Animations/loadingAimation.json" Style="height: 200px"/>
}
@code {

    private IList<Movie> recommendations = new List<Movie>();
    private bool recommendationsLoaded = false;
    private int amountOfMoviesToShow = 8;
    private int counter = 0;
    private int selectedSlide = 1;


    private async Task LoadRecommendedMovies()
    {
        recommendations = await RecommendationsModel.GetRecommendations();
        recommendationsLoaded = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRecommendedMovies();
    }

    private void OnMovieClick(string movieId)
    {
        NavManager.NavigateTo($"movieDetails/{movieId}");
    }

    private async Task NextSlide()
    {
        selectedSlide++;
        await LoadRecommendedMovies();
    }

}