@namespace Frontend.Components
@implements IDisposable
@using Blazorise
@using Frontend.Events
@using Frontend.Model.Firebase
@using Alert = Frontend.Entities.Alert
@inject IFirebaseModel FirebaseModel
@inject IAlertAggregator AlertAggregator

@if(Alert != null){
    <div class="alert-container">
        <Alert Color="@(Alert!.Success? Color.Success : Color.Warning)" @bind-Visible="@_visibility" Margin="Margin.Is0">
            <AlertMessage>@Alert.Header</AlertMessage>
            <AlertDescription>@Alert.Message</AlertDescription>
        </Alert>
    </div>
}


@code {
    private Alert? Alert { get; set; }
    private bool _visibility;
    private int _alertTimeSeconds = 5;
    private AlertBoxHelper _helper;

    private CancellationTokenSource? _cancelAlert;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _helper = new AlertBoxHelper();
        AlertAggregator.OnNotifyAlert += HandleAlertEvent;
    }
    
    public void Dispose()
    {
        AlertAggregator.OnNotifyAlert -= HandleAlertEvent;
    }

    private void HandleAlertEvent(object? sender, AlertEventArgs args)
    {
        Alert = _helper.GetAlert(args.Type, args.Message);
        if (Alert == null) return;
        
        _visibility = true;
        StateHasChanged();
        HideAlertTimer();
    }

    private void HideAlertTimer()
    {
        _cancelAlert?.Cancel();
        _cancelAlert = new CancellationTokenSource();
        var cancelToken = _cancelAlert.Token;
        Task.Delay(_alertTimeSeconds * 1000, cancelToken).ContinueWith(task =>
        {
            if (!cancelToken.IsCancellationRequested)
            {
                _visibility = false;
                InvokeAsync(StateHasChanged);
            }
        });
    }


}