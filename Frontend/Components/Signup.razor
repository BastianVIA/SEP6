@using Blazorise
@using System.ComponentModel.DataAnnotations
@using Frontend.Model.Firebase
@using Frontend.Model.User
@using Frontend.Service
@inject IFirebaseModel FirebaseModel
@namespace Frontend.Components
@inject IUserModel UserModel
@inject CustomAuthenticationStateProvider AuthStateProvider

<div class="signup-content">
    <Card>
        <CardBody>
            <CardTitle Size="4" TextWeight="TextWeight.Bold" TextColor="TextColor.Primary">
                Signup
            </CardTitle>
            <CardText>
                Please fill out the form to signup.
            </CardText>
            <div class="divider-line"><Divider/></div>
            <Validations @ref="@signupValidationsRef" Mode="ValidationMode.Auto" Model="@user">
                <Validation>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3">Display name</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit Placeholder="Display name" @bind-Text="@user.DisplayName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsEmail">
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3">Email</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit Placeholder="Enter email" @bind-Text="@user.Email">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3">Password</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@user.Password">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3">Retype Password</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit Role="TextRole.Password" Placeholder="Retype password" @bind-Text="@user.ConfirmPassword">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
            <Field Flex="Flex.JustifyContent.End" Margin="Margin.Is0">
                <Button Clicked="CreateUser" Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit>Create account</Button>
            </Field>
        </CardBody>
    </Card>
</div>

@code {
    User user = new User();
    Validations signupValidationsRef;
    [Parameter]
    public EventCallback<bool> SignupSuccess { get; set; }

    public class User
    {
        private const int passwordMaxLenght = 50;
        private const int passwordMinLenght = 5;

        [Required]
        [StringLength( 20, ErrorMessage = "Name is too long." )]
        public string DisplayName { get; set; }

        [Required]
        [EmailAddress( ErrorMessage = "Invalid email." )]
        public string Email { get; set; }

        [Required( ErrorMessage = "Password is required" )]
        [StringLength( passwordMaxLenght, ErrorMessage = $"Must be at least 5 characters", MinimumLength = passwordMinLenght )]
        [DataType( DataType.Password )]
        public string Password { get; set; }

        [Required( ErrorMessage = "Confirm Password is required" )]
        [StringLength( passwordMaxLenght, ErrorMessage = "Must be at least 5 characters", MinimumLength = passwordMinLenght )]
        [DataType( DataType.Password )]
        [Compare( "Password" )]
        public string ConfirmPassword { get; set; }
    }

    private async Task CreateUser()
    {
        if (!await signupValidationsRef.ValidateAll()) return;

        if (await FirebaseModel.CreateUser(user.DisplayName, user.Email, user.Password))
        {
            await UserModel.CreateUser(FirebaseModel.CurrentUser.TokenValue, user.DisplayName, user.Email);
            AuthStateProvider.SignIn();
            await SignupSuccess.InvokeAsync(true);
        }
        else
        {
            await SignupSuccess.InvokeAsync(false);
        }
    }
}