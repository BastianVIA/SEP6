@using Blazorise
@using Frontend.Entities
@using Frontend.Model.Firebase
@using Frontend.Model.MovieDetail
@using Frontend.Model.MovieSearch
@inject IFirebaseModel FirebaseModel
@using Frontend.Model.SocialFeed
@using Frontend.Model.User
@using Frontend.Model.UserProfiles
@using Frontend.Service
@using System.Diagnostics
@using Frontend.Model.UserProfilePicture
@inject ISocialFeedModel SocialFeedModel
@inject IUserProfilesModel UserProfilesModel
@inject IMovieDetailModel MovieDetailModel
@inject IUserProfilePictureModel UserProfilePictureModel

<div class="card-deck-container">
    
    <h3>Social Feed</h3>

    @if (userFeedsLoaded)
    {
        @if (feedPosts.Count >= 1)
        {
            foreach (var post in posts)
            {
                <div class="post-container">
                    <Row Margin="Margin.Is2.FromBottom">
                        <Column ColumnSize="ColumnSize.Is2" Margin="Margin.Is4.FromEnd">
                            <img src="@post.ProfilePicture" alt="profile pic">
                        </Column>
                        <Column ColumnSize="ColumnSize.Is3">
                            <h4>@post.DisplayName</h4>
                            <p>@post.TimeSincePostText</p>
                        </Column>
                    </Row>
                    <Divider/>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is12">
                            @post.PostText
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is2.FromTop">
                        <Column ColumnSize="ColumnSize.Is12">
                            <Button Color="Color.Primary" Clicked="() => OnLikePost(post)">@post.NumberOfReactions <Icon Name="IconName.ThumbsUp" TextColor="TextColor.Light"/></Button>
                            <Button Color="Color.Primary" Clicked="() => OnCommentClicked(post)">Comment</Button>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is2.FromTop">
                        <Column ColumnSize="ColumnSize.Is12">
                            <Accordion>
                                <Collapse Visible="@showComments">
                                    <CollapseHeader>
                                        <Heading Size="HeadingSize.Is5">
                                            <AccordionToggle>Comments</AccordionToggle>
                                        </Heading>
                                    </CollapseHeader>
                                    <CollapseBody>
                                        @foreach (Comment comment in post.Comments)
                                        {
                                            <Div Border="Border.Is1.Dark">
                                                @comment.DisplayNameOfUser: @comment.Content
                                            </Div>
                                        }
                                    </CollapseBody>
                                </Collapse>
                            </Accordion>
                        </Column>
                    </Row>
                </div>
            }
        }
    }
</div>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Comment on post</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Comment</FieldLabel>
                <TextEdit @bind-Text="@commentToUpload"/>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@UploadComment">Upload comment</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<UserFeed> feedPosts;
    private List<Post> posts = new List<Post>();
    private bool userFeedsLoaded = false;
    private int pageNumber = 1;
    private User userInfo;
    private bool showComments = false;
    private Modal modalRef;
    private string postIdToCommentOn;
    private string commentToUpload;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUserFeeds();
    }

    private async Task LoadUserFeeds()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        
        await LoadUserInfo();
        userFeedsLoaded = true;
        StateHasChanged();
        
        stopwatch.Stop();
        Console.WriteLine(stopwatch.Elapsed);
    }

    private async Task LoadUserInfo()
    {
        feedPosts = await SocialFeedModel.GetSocialFeed(FirebaseModel.CurrentUser.TokenValue, pageNumber);
        foreach (var userFeed in feedPosts)
        {
            string postText = GetTextBasedOnTopic(userFeed);
            // var profilePicture = UserProfilePictureModel.GetProfilePicture(FirebaseModel.CurrentUser.UID).Result;
            // var profilePictureString = Convert.ToBase64String(profilePicture, 0, profilePicture.Length);
            var timeSincePostText = GetTimeSincePost(userFeed.TimeOfActivity);
            posts.Add(new Post
            {
                Id = userFeed.Id,
                ActivityData = userFeed.ActivityData,
                TimeSincePostText = timeSincePostText,
                PostText = postText,
                DisplayName = userFeed.DisplayName,
                ProfilePicture = "/Images/NotFoundImage.jpg",
                Comments = userFeed.Comments,
                NumberOfReactions = userFeed.NumberOfReactions
            });
        }
    }

    private string GetTextBasedOnTopic(UserFeed userFeed)
    {
        var textToReturn = "";
        switch (userFeed.Topic)
        {
            case FeedPostDtoTopic.FavoriteMovie:
                textToReturn = $"{userFeed.DisplayName} just added {userFeed.ActivityData.MovieTitle} to their favorite movies";
                break;
            case FeedPostDtoTopic.CreatedRating:
                textToReturn = $"{userFeed.DisplayName} just rated {userFeed.ActivityData.MovieTitle} {userFeed.ActivityData.NewRating}⭐";
                break;
            case FeedPostDtoTopic.UpdatedRating:
                textToReturn = "";
                break;
            case FeedPostDtoTopic.RemovedRating:
                textToReturn = "";
                break;
            case FeedPostDtoTopic.NewUser:
                textToReturn = $"{userFeed.DisplayName} created their account";
                break;
            case FeedPostDtoTopic.UnFavoriteMovie:
                textToReturn = "";
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(userFeed.Topic), userFeed.Topic, null);
        }
        return textToReturn;
    }

    private string GetTimeSincePost(DateTimeOffset timeOfActivity)
    {
        var timeSpan = DateTimeOffset.Now - timeOfActivity;

        var timeSincePost = "";
        
        if (timeSpan.Days > 1)
        {
            timeSincePost = $"{timeSpan.Days} days ago";
        }
        else if (timeSpan.Days == 1)
        {
            timeSincePost = $"{timeSpan.Days} day ago";
        }
        else if (timeSpan.Hours > 1)
        {
            timeSincePost = $"{timeSpan.Hours} hours ago";
        }
        else if (timeSpan.Hours == 1)
        {
            timeSincePost = $"{timeSpan.Hours} hour ago";
        }
        else if (timeSpan.Minutes <= 2)
        {
            timeSincePost = "Just now";
        }
        else
        {
            timeSincePost = $"{timeSpan.Minutes} minutes ago";
        }

        return timeSincePost;
    }

    private async Task OnLikePost(Post post)
    {
        try
        {
            await SocialFeedModel.ReactToSocialFeed(FirebaseModel.CurrentUser.TokenValue, post.Id.ToString());
            post.NumberOfReactions++;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private Task OnCommentClicked(Post post)
    {
        postIdToCommentOn = post.Id.ToString();
        return modalRef.Show();
    }


    private async Task UploadComment()
    {
        await SocialFeedModel.CommentOnPost(FirebaseModel.CurrentUser.TokenValue, postIdToCommentOn, commentToUpload);
        postIdToCommentOn = "";
        commentToUpload = "";
        await modalRef.Hide();
    }

    private Task HideModal()
    {
        postIdToCommentOn = "";
        commentToUpload = "";
        return modalRef.Hide();
    }

}