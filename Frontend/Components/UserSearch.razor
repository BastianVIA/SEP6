@using Frontend.Entities
@using Frontend.Service
@inject IUserSearchModel UserSearchModel
@inject NavigationManager NavManager
@using Blazorise
@using Frontend.Model.UserSearch

<PageTitle>Search User</PageTitle>

@if (isDataFetched)
{
    <div class="page-content">
        <h3>Search Result User</h3>
        <Button Color="Color.Primary" Clicked="@ShowAllUsers">Show All Users</Button>

        @if (userList.Count == 0)
        {
            <p size="20px">No such user exists.</p>
        }
        <Table Hoverable Striped>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>Profile Picture</TableHeaderCell>
                    <TableHeaderCell>
                        <div>
                            Username
                            <Button Color="Color.Secondary" Clicked="SortByDisplayName">
                                <Icon Name="@IconName.AngleDown"/>
                            </Button>
                        </div>
                    </TableHeaderCell>
                    <TableHeaderCell>
                        <div>
                            Number Rated Movies
                            <Button Color="Color.Secondary" Clicked="SortByNumberOfVotedMovies">
                                <Icon Name="@IconName.AngleDown"/>
                            </Button>
                        </div>
                    </TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (User user in userList)
                {
                    <TableRow @onclick="@(() => OnUserClick(user.Id))">
                        <TableRowCell >
                            <img src="@(!string.IsNullOrEmpty(user.ProfilePicture) ? user.ProfilePicture : defaultProfilePicture)" alt="profile pic" width="auto" height="200">
                        </TableRowCell>
                        <TableRowCell >@user.Username</TableRowCell>
                        <TableRowCell >@user.RatedMovies</TableRowCell>

                    </TableRow>
                }
            </TableBody>
        </Table>

        <div class="page-navigation">
            <button class="btn btn-secondary" @onclick="@GoToPreviousPage">
                <Icon Name="@IconName.AngleLeft"/>
            </button>
            <div class="page-number">
                <p>Page @pageNumber </p>
            </div>
            <button class="btn btn-secondary" @onclick="@GoToNextPage">
                <Icon Name="@IconName.AngleRight"/>
            </button>
        </div>
    </div>
}
else
{
    @if (isConnected)
    {
        <Loading/>
    }
}

@code {

    [Parameter]
    public string DisplayName { get; set; }

    private string defaultProfilePicture = "/Images/NotFoundImage.jpg";
    private bool fetchAll = false;
    private IList<User> userList = new List<User>();
    public bool isDataFetched = false;
    private int pageNumber { get; set; }
    private int usersPerPage = 10;
    
    private bool lastUsedMethodIsSearch;

    protected override async Task OnParametersSetAsync()
    {
        pageNumber = 1;
        await SearchForUser();
    }

    private async Task SearchForUser()
    {
        isDataFetched = false;
        userList.Clear();
        if (userSortingKey2 == UserSortingKey2.MoviesVoted)
        {
            sortingDirection3 = sortingDirection3;
        }
        else if (userSortingKey2 == UserSortingKey2.DisplayName)
        {
            sortingDirection3 = displayNameSortingDirection;
        }
        pageNumber = 1; // Reset page number here
        userList = await UserSearchModel.SearchForUserAsync(DisplayName, userSortingKey2, sortingDirection3, pageNumber);
        isDataFetched = true;
        lastUsedMethodIsSearch = true;
    }
    
   


    private SortingDirection3 sortingDirection3 = SortingDirection3.ASC;
    private SortingDirection3 displayNameSortingDirection = SortingDirection3.ASC;
    private UserSortingKey2? userSortingKey2;

    private bool isConnected;

   
    
    private async Task SortByNumberOfVotedMovies()
    {
        if (lastUsedMethodIsSearch)
        {
            userSortingKey2 = UserSortingKey2.MoviesVoted;
            sortingDirection3 = sortingDirection3 == SortingDirection3.ASC ? SortingDirection3.DESC : SortingDirection3.ASC;
            pageNumber = 1;
            await SearchForUser();
        }
        else
        {
            userSortingKeyForAll = UserSortingKey.MoviesVoted;
            sortingDirectionForAll = sortingDirectionForAll == SortingDirection.ASC ? SortingDirection.DESC : SortingDirection.ASC;
            pageNumber = 1;
            await ShowAllUsers();
        }
    }
    private async Task SortByDisplayName()
    {
        if (lastUsedMethodIsSearch)
        {
            userSortingKey2 = UserSortingKey2.DisplayName;
            displayNameSortingDirection = displayNameSortingDirection == SortingDirection3.ASC ? SortingDirection3.DESC : SortingDirection3.ASC;
            pageNumber = 1;
            await SearchForUser();
        }
        else
        {
            userSortingKeyForAll = UserSortingKey.DisplayName;
            sortingDirectionForAll = sortingDirectionForAll == SortingDirection.ASC ? SortingDirection.DESC : SortingDirection.ASC;
            pageNumber = 1;
            await ShowAllUsers();
        }
    }



    private void OnUserClick(string userId)
    {
        NavManager.NavigateTo($"UserProfile/{userId}");
    }
    
    private async Task GoToPreviousPage()
    {
        if (pageNumber <= 1)
        {
            return;
        }
        pageNumber--;

        if (lastUsedMethodIsSearch)
        {
            await SearchForUser();
        }
        else
        {
            await ShowAllUsers();
        }
    }

    private async Task GoToNextPage()
    {
        if (userList.Count < usersPerPage)
        {
            return;
        }
        pageNumber++;

        if (lastUsedMethodIsSearch)
        {
            await SearchForUser();
        }
        else
        {
            await ShowAllUsers();
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        isConnected = !firstRender;
    }

    private SortingDirection sortingDirectionForAll = SortingDirection.ASC;
    private UserSortingKey? userSortingKeyForAll;


    
    private async Task ShowAllUsers()
    {
        pageNumber = 1;
        userList.Clear();


        userList = await UserSearchModel.SearchForUserAllUsersAsync(userSortingKeyForAll, sortingDirectionForAll, pageNumber);

        isDataFetched = true;
        lastUsedMethodIsSearch = false;
    }

}





