@using Blazorise
@using Frontend.Authentication
@using Frontend.Events
@using Frontend.Model.Firebase
@using Frontend.Pages
@using Frontend.Service
@using Microsoft.OpenApi.Services
@inject IFirebaseModel FirebaseModel
@inject IAlertAggregator AlertAggregator
@inject NavigationManager NavManager
@inject CustomAuthenticationStateProvider AuthStateProvider

<div class="navbar-container">
    <Bar Breakpoint="Breakpoint.Desktop"
         Background="Background.Dark"
         ThemeContrast="ThemeContrast.Dark">
        <BarBrand>
            FarligTigerMDB
        </BarBrand>
        <BarToggler/>
        <BarMenu>
            <BarStart>
                <BarItem>
                    <BarLink To="">Home</BarLink>
                </BarItem>
                <BarItem>
                    <BarLink To="/Top100">Top 100 Movies</BarLink>
                </BarItem>
                <AuthorizeView>
                    <Authorized>
                        <BarItem>
                            <BarLink To="/FavoriteMovies">Favorite Movies</BarLink>
                        </BarItem>
                    </Authorized>
                </AuthorizeView>
            </BarStart>
            <BarEnd>
                <BarItem>
                    <Addons>
                        @* <Addon AddonType="AddonType.Body"> *@
                        @*     <TextEdit @bind-Text="@searchTerm" Placeholder="Search"/> *@
                        @* </Addon> *@
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@searchTerm" Placeholder="Search" @onkeydown="@HandleKeyDown"/>
                        </Addon>
                        <Addon AddonType="AddonType.End">
                            <Button Color="Color.Primary" Clicked="PerformSearch">
                                <Icon Name="IconName.Search"/>
                            </Button>
                        </Addon>
                    </Addons>
                </BarItem>
                <AuthorizeView>
                    <Authorized>
                        <BarItem>
                            <Dropdown>
                                <DropdownToggle Color="Color.Primary" TextWeight="TextWeight.Bold">
                                    @displayName
                                </DropdownToggle>
                                <DropdownMenu>
                                    <DropdownItem Clicked="MyProfile">My profile</DropdownItem>
                                    <DropdownDivider/>
                                    <DropdownItem Clicked="Logout">Logout</DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        </BarItem>
                    </Authorized>
                    <NotAuthorized>
                        <BarItem>
                            <BarLink To="SignUp_Login">Login</BarLink>
                        </BarItem>
                    </NotAuthorized>
                </AuthorizeView>
            </BarEnd>
        </BarMenu>
    </Bar>
</div>

@code {
    private string movieTitle;
    private string displayName;
    private string searchOptionName;
    private string searchTerm;
    private bool searchUsers = false;

    private void SearchForMovie()
    {
        if (movieTitle == null) return;
        NavManager.NavigateTo($"searchResult/{movieTitle}");
    }

    protected override void OnInitialized()
    {
        AlertAggregator.OnNotifyAlert += SetDisplayName;
        searchOptionName = "Search Movie";
    }
    
    public void Dispose()
    {
        AlertAggregator.OnNotifyAlert -= SetDisplayName;
    }
    
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            PerformSearch();
        }
    }

    private void PerformSearch()
    {
        if (searchTerm == null) return;
        NavManager.NavigateTo($"SearchResult/{searchTerm}");
    }
    
    private void SetDisplayName(object? sender, AlertEventArgs args)
    {
        if (args.Type != AlertBoxHelper.AlertType.LoginSuccess &&
            args.Type != AlertBoxHelper.AlertType.SignupSuccess) return;

        displayName = FirebaseModel.CurrentUser.DisplayName;
        StateHasChanged();
    }


    private void ToggleSearchUsers(bool isSearchUsers)
    {
        searchUsers = isSearchUsers;
    }
    
    private async Task Logout()
    {
        FirebaseModel.Logout();
        await AuthStateProvider.UpdateAuthenticationState(null);
        NavManager.NavigateTo("/");
    }
    
    private void MyProfile()
    {
        NavManager.NavigateTo("/");
        NavManager.NavigateTo($"/userprofile/{FirebaseModel.CurrentUser.UID}");
    }

}